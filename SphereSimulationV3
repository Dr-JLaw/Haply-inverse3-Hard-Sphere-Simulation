<!DOCTYPE html>
<html>
<head>
  <title>Inverse3 Spring Simulator (WebSocket) - V2</title>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    p { font-size: 1.2em; }
    button { padding: 10px 20px; margin: 10px 5px; font-size: 1em; }
  </style>
</head>
<body>
  <h2>Inverse3 Virtual Spring (WebSocket) - V2</h2>
  <button onclick="setAnchor()">üìç Set Anchor Point</button>
  <button onclick="clearAnchor()">‚ùå Clear Anchor</button>
  <p id="status">Connecting...</p>
  <p id="position">Position: N/A</p>
  <p id="force">Force Sent: N/A</p>
  <p id="anchor">Anchor: N/A</p>
  <p id="distance">Distance from Anchor: N/A</p>

  <script>
    const ws = new WebSocket("ws://localhost:10001");
    let deviceID = null;
    let anchor = null;
    const restLength = 0.05;
    const k = 300;
    const k_0 = 0;
    const k_compress=k
    const k_stretch=k

    ws.onopen = () => {
      document.getElementById("status").innerText = "‚úÖ Connected to Inverse3 WebSocket";
    };

    ws.onerror = (err) => {
      document.getElementById("status").innerText = "‚ùå WebSocket Error";
      console.error("WebSocket error:", err);
    };

    ws.onmessage = mainLoop;

    function mainLoop(event) {
      const data = JSON.parse(event.data);
      const device = data.inverse3?.[0];
      if (!device) return;

      deviceID = device.device_id;
      const pos = device.state?.cursor_position;
      if (!pos) return;

      document.getElementById("position").innerText =
        `Position ‚Üí X: ${pos.x.toFixed(3)} | Y: ${pos.y.toFixed(3)} | Z: ${pos.z.toFixed(3)}`;

      let force = { x: 0, y: 0, z: 0 };



      const msg = {
        inverse3: [
          {
            device_id: deviceID,
            commands: { set_cursor_force: { values: force } }
          }
        ]
      };

      ws.send(JSON.stringify(msg));

      document.getElementById("force").innerText =
        `Force Sent ‚Üí X: ${force.x.toFixed(2)} | Y: ${force.y.toFixed(2)} | Z: ${force.z.toFixed(2)}`;
    }

    function setAnchor() {
      document.getElementById("status").innerText = "üîÑ Recording anchor...";
      // Temporarily add one-time listener
      const handler = (event) => {
        const data = JSON.parse(event.data);
        const device = data.inverse3?.[0];
        if (!device) return;
        anchor = device.state?.cursor_position;
        document.getElementById("anchor").innerText =
          `Anchor ‚Üí X: ${anchor.x.toFixed(3)} | Y: ${anchor.y.toFixed(3)} | Z: ${anchor.z.toFixed(3)}`;
        document.getElementById("status").innerText = "‚úÖ Anchor Set";
        ws.removeEventListener("message", handler); // Restore main loop
      };
      ws.addEventListener("message", handler);
    }

    function clearAnchor() {
      anchor = null;
      document.getElementById("anchor").innerText = "Anchor: N/A";
      document.getElementById("status").innerText = "Anchor cleared.";
    }
  </script>
</body>
</html>

